#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
//#extension GL_EXT_debug_printf : enable

layout(binding = 11) readonly buffer SphereArray { vec4[] Spheres; };

hitAttributeEXT vec4 Sphere;

void main()
{
	//debugPrintfEXT("Sphere intersection shader\n");
	const vec4 sphere = Spheres[gl_InstanceCustomIndexEXT];
	const vec3 center = sphere.xyz;
	const float radius = sphere.w;
	
	const vec3 origin = gl_WorldRayOriginEXT;
	const vec3 direction = gl_WorldRayDirectionEXT;
	const float tMin = gl_RayTminEXT;
	const float tMax = gl_RayTmaxEXT;

	// https://en.wikipedia.org/wiki/Quadratic_formula

	const vec3 oc = origin - center;
	const float a = direction.x * direction.x + direction.y * direction.y;
	const float b = oc.x * direction.x + oc.y * direction.y;
	const float c = oc.x * oc.x + oc.y + oc.y - radius * radius;
	const float discriminant = b * b - a * c;

	if (discriminant >= 0)
	{
		const float t1 = (-b - sqrt(discriminant)) / a;
		const float t2 = (-b + sqrt(discriminant)) / a;

		if ((tMin <= t1 && t1 < tMax) || (tMin <= t2 && t2 < tMax))
		{
			Sphere = sphere;
			reportIntersectionEXT((tMin <= t1 && t1 < tMax) ? t1 : t2, 0);
		}
	}
}

